// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NonProfit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("nonProfit", Value.fromBytes(Bytes.empty()));
    this.set("isNonProfitOnWhitelist", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NonProfit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NonProfit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NonProfit", id.toString(), this);
    }
  }

  static load(id: string): NonProfit | null {
    return changetype<NonProfit | null>(store.get("NonProfit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nonProfit(): Bytes {
    let value = this.get("nonProfit");
    return value!.toBytes();
  }

  set nonProfit(value: Bytes) {
    this.set("nonProfit", Value.fromBytes(value));
  }

  get isNonProfitOnWhitelist(): boolean {
    let value = this.get("isNonProfitOnWhitelist");
    return value!.toBoolean();
  }

  set isNonProfitOnWhitelist(value: boolean) {
    this.set("isNonProfitOnWhitelist", Value.fromBoolean(value));
  }
}

export class Integration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("balance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Integration entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Integration entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Integration", id.toString(), this);
    }
  }

  static load(id: string): Integration | null {
    return changetype<Integration | null>(store.get("Integration", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class Promoter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalDonated", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Promoter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Promoter entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Promoter", id.toString(), this);
    }
  }

  static load(id: string): Promoter | null {
    return changetype<Promoter | null>(store.get("Promoter", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalDonated(): BigInt {
    let value = this.get("totalDonated");
    return value!.toBigInt();
  }

  set totalDonated(value: BigInt) {
    this.set("totalDonated", Value.fromBigInt(value));
  }
}

export class DonationBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromBytes(Bytes.empty()));
    this.set("integration", Value.fromBytes(Bytes.empty()));
    this.set("nonProfit", Value.fromBytes(Bytes.empty()));
    this.set("totalDonated", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DonationBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DonationBalance", id.toString(), this);
    }
  }

  static load(id: string): DonationBalance | null {
    return changetype<DonationBalance | null>(store.get("DonationBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get integration(): Bytes {
    let value = this.get("integration");
    return value!.toBytes();
  }

  set integration(value: Bytes) {
    this.set("integration", Value.fromBytes(value));
  }

  get nonProfit(): Bytes {
    let value = this.get("nonProfit");
    return value!.toBytes();
  }

  set nonProfit(value: Bytes) {
    this.set("nonProfit", Value.fromBytes(value));
  }

  get totalDonated(): BigInt {
    let value = this.get("totalDonated");
    return value!.toBigInt();
  }

  set totalDonated(value: BigInt) {
    this.set("totalDonated", Value.fromBigInt(value));
  }
}
