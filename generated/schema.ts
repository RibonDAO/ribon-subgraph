// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class IntegrationController extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("balance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save IntegrationController entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save IntegrationController entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("IntegrationController", id.toString(), this);
    }
  }

  static load(id: string): IntegrationController | null {
    return changetype<IntegrationController | null>(
      store.get("IntegrationController", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class Promoter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalDonated", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Promoter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Promoter entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Promoter", id.toString(), this);
    }
  }

  static load(id: string): Promoter | null {
    return changetype<Promoter | null>(store.get("Promoter", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalDonated(): BigInt {
    let value = this.get("totalDonated");
    return value!.toBigInt();
  }

  set totalDonated(value: BigInt) {
    this.set("totalDonated", Value.fromBigInt(value));
  }
}

export class NonProfit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("isNonProfitOnWhitelist", Value.fromBoolean(false));
    this.set("pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NonProfit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NonProfit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NonProfit", id.toString(), this);
    }
  }

  static load(id: string): NonProfit | null {
    return changetype<NonProfit | null>(store.get("NonProfit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isNonProfitOnWhitelist(): boolean {
    let value = this.get("isNonProfitOnWhitelist");
    return value!.toBoolean();
  }

  set isNonProfitOnWhitelist(value: boolean) {
    this.set("isNonProfitOnWhitelist", Value.fromBoolean(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("balance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get nonProfits(): Array<string> {
    let value = this.get("nonProfits");
    return value!.toStringArray();
  }

  set nonProfits(value: Array<string>) {
    this.set("nonProfits", Value.fromStringArray(value));
  }
}

export class PoolIncreaseFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("fee", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolIncreaseFee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolIncreaseFee entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolIncreaseFee", id.toString(), this);
    }
  }

  static load(id: string): PoolIncreaseFee | null {
    return changetype<PoolIncreaseFee | null>(store.get("PoolIncreaseFee", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DonationBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("donationBatch", Value.fromString(""));
    this.set("integrationController", Value.fromString(""));
    this.set("nonProfit", Value.fromString(""));
    this.set("totalDonated", Value.fromBigInt(BigInt.zero()));
    this.set("pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DonationBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DonationBalance", id.toString(), this);
    }
  }

  static load(id: string): DonationBalance | null {
    return changetype<DonationBalance | null>(store.get("DonationBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get donationBatch(): string {
    let value = this.get("donationBatch");
    return value!.toString();
  }

  set donationBatch(value: string) {
    this.set("donationBatch", Value.fromString(value));
  }

  get integrationController(): string {
    let value = this.get("integrationController");
    return value!.toString();
  }

  set integrationController(value: string) {
    this.set("integrationController", Value.fromString(value));
  }

  get nonProfit(): string {
    let value = this.get("nonProfit");
    return value!.toString();
  }

  set nonProfit(value: string) {
    this.set("nonProfit", Value.fromString(value));
  }

  get totalDonated(): BigInt {
    let value = this.get("totalDonated");
    return value!.toBigInt();
  }

  set totalDonated(value: BigInt) {
    this.set("totalDonated", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class PromoterDonation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amountDonated", Value.fromBigInt(BigInt.zero()));
    this.set("promoter", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PromoterDonation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PromoterDonation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PromoterDonation", id.toString(), this);
    }
  }

  static load(id: string): PromoterDonation | null {
    return changetype<PromoterDonation | null>(
      store.get("PromoterDonation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amountDonated(): BigInt {
    let value = this.get("amountDonated");
    return value!.toBigInt();
  }

  set amountDonated(value: BigInt) {
    this.set("amountDonated", Value.fromBigInt(value));
  }

  get promoter(): string {
    let value = this.get("promoter");
    return value!.toString();
  }

  set promoter(value: string) {
    this.set("promoter", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}
