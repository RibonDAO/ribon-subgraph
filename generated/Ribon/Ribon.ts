// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DonationAdded extends ethereum.Event {
  get params(): DonationAdded__Params {
    return new DonationAdded__Params(this);
  }
}

export class DonationAdded__Params {
  _event: DonationAdded;

  constructor(event: DonationAdded) {
    this._event = event;
  }

  get user(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get integration(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nonProfit(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class IntegrationBalanceUpdated extends ethereum.Event {
  get params(): IntegrationBalanceUpdated__Params {
    return new IntegrationBalanceUpdated__Params(this);
  }
}

export class IntegrationBalanceUpdated__Params {
  _event: IntegrationBalanceUpdated;

  constructor(event: IntegrationBalanceUpdated) {
    this._event = event;
  }

  get integration(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NonProfitAdded extends ethereum.Event {
  get params(): NonProfitAdded__Params {
    return new NonProfitAdded__Params(this);
  }
}

export class NonProfitAdded__Params {
  _event: NonProfitAdded;

  constructor(event: NonProfitAdded) {
    this._event = event;
  }

  get nonProfit(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NonProfitRemoved extends ethereum.Event {
  get params(): NonProfitRemoved__Params {
    return new NonProfitRemoved__Params(this);
  }
}

export class NonProfitRemoved__Params {
  _event: NonProfitRemoved;

  constructor(event: NonProfitRemoved) {
    this._event = event;
  }

  get nonProfit(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolBalanceIncreased extends ethereum.Event {
  get params(): PoolBalanceIncreased__Params {
    return new PoolBalanceIncreased__Params(this);
  }
}

export class PoolBalanceIncreased__Params {
  _event: PoolBalanceIncreased;

  constructor(event: PoolBalanceIncreased) {
    this._event = event;
  }

  get promoter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Ribon extends ethereum.SmartContract {
  static bind(address: Address): Ribon {
    return new Ribon("Ribon", address);
  }

  donationPoolBalance(): BigInt {
    let result = super.call(
      "donationPoolBalance",
      "donationPoolBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_donationPoolBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "donationPoolBalance",
      "donationPoolBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  donationToken(): Address {
    let result = super.call("donationToken", "donationToken():(address)", []);

    return result[0].toAddress();
  }

  try_donationToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "donationToken",
      "donationToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getIntegrationBalance(_integration: Address): BigInt {
    let result = super.call(
      "getIntegrationBalance",
      "getIntegrationBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_integration)]
    );

    return result[0].toBigInt();
  }

  try_getIntegrationBalance(
    _integration: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIntegrationBalance",
      "getIntegrationBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_integration)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIntegrationCouncil(): Address {
    let result = super.call(
      "getIntegrationCouncil",
      "getIntegrationCouncil():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getIntegrationCouncil(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getIntegrationCouncil",
      "getIntegrationCouncil():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  integrationCouncil(): Address {
    let result = super.call(
      "integrationCouncil",
      "integrationCouncil():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_integrationCouncil(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "integrationCouncil",
      "integrationCouncil():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  integrations(param0: Address): BigInt {
    let result = super.call("integrations", "integrations(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_integrations(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "integrations",
      "integrations(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isNonProfitOnWhitelist(_nonProfit: Address): boolean {
    let result = super.call(
      "isNonProfitOnWhitelist",
      "isNonProfitOnWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(_nonProfit)]
    );

    return result[0].toBoolean();
  }

  try_isNonProfitOnWhitelist(
    _nonProfit: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isNonProfitOnWhitelist",
      "isNonProfitOnWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(_nonProfit)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nonProfitCouncil(): Address {
    let result = super.call(
      "nonProfitCouncil",
      "nonProfitCouncil():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_nonProfitCouncil(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nonProfitCouncil",
      "nonProfitCouncil():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nonProfits(param0: Address): boolean {
    let result = super.call("nonProfits", "nonProfits(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_nonProfits(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("nonProfits", "nonProfits(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _donationToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _integrationCouncil(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _nonProfitCouncil(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddDonationPoolBalanceCall extends ethereum.Call {
  get inputs(): AddDonationPoolBalanceCall__Inputs {
    return new AddDonationPoolBalanceCall__Inputs(this);
  }

  get outputs(): AddDonationPoolBalanceCall__Outputs {
    return new AddDonationPoolBalanceCall__Outputs(this);
  }
}

export class AddDonationPoolBalanceCall__Inputs {
  _call: AddDonationPoolBalanceCall;

  constructor(call: AddDonationPoolBalanceCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddDonationPoolBalanceCall__Outputs {
  _call: AddDonationPoolBalanceCall;

  constructor(call: AddDonationPoolBalanceCall) {
    this._call = call;
  }
}

export class AddNonProfitToWhitelistCall extends ethereum.Call {
  get inputs(): AddNonProfitToWhitelistCall__Inputs {
    return new AddNonProfitToWhitelistCall__Inputs(this);
  }

  get outputs(): AddNonProfitToWhitelistCall__Outputs {
    return new AddNonProfitToWhitelistCall__Outputs(this);
  }
}

export class AddNonProfitToWhitelistCall__Inputs {
  _call: AddNonProfitToWhitelistCall;

  constructor(call: AddNonProfitToWhitelistCall) {
    this._call = call;
  }

  get _nonProfit(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddNonProfitToWhitelistCall__Outputs {
  _call: AddNonProfitToWhitelistCall;

  constructor(call: AddNonProfitToWhitelistCall) {
    this._call = call;
  }
}

export class DonateThroughIntegrationCall extends ethereum.Call {
  get inputs(): DonateThroughIntegrationCall__Inputs {
    return new DonateThroughIntegrationCall__Inputs(this);
  }

  get outputs(): DonateThroughIntegrationCall__Outputs {
    return new DonateThroughIntegrationCall__Outputs(this);
  }
}

export class DonateThroughIntegrationCall__Inputs {
  _call: DonateThroughIntegrationCall;

  constructor(call: DonateThroughIntegrationCall) {
    this._call = call;
  }

  get _nonProfit(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DonateThroughIntegrationCall__Outputs {
  _call: DonateThroughIntegrationCall;

  constructor(call: DonateThroughIntegrationCall) {
    this._call = call;
  }
}

export class RemoveNonProfitFromWhitelistCall extends ethereum.Call {
  get inputs(): RemoveNonProfitFromWhitelistCall__Inputs {
    return new RemoveNonProfitFromWhitelistCall__Inputs(this);
  }

  get outputs(): RemoveNonProfitFromWhitelistCall__Outputs {
    return new RemoveNonProfitFromWhitelistCall__Outputs(this);
  }
}

export class RemoveNonProfitFromWhitelistCall__Inputs {
  _call: RemoveNonProfitFromWhitelistCall;

  constructor(call: RemoveNonProfitFromWhitelistCall) {
    this._call = call;
  }

  get _nonProfit(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveNonProfitFromWhitelistCall__Outputs {
  _call: RemoveNonProfitFromWhitelistCall;

  constructor(call: RemoveNonProfitFromWhitelistCall) {
    this._call = call;
  }
}

export class UpdateIntegrationBalanceCall extends ethereum.Call {
  get inputs(): UpdateIntegrationBalanceCall__Inputs {
    return new UpdateIntegrationBalanceCall__Inputs(this);
  }

  get outputs(): UpdateIntegrationBalanceCall__Outputs {
    return new UpdateIntegrationBalanceCall__Outputs(this);
  }
}

export class UpdateIntegrationBalanceCall__Inputs {
  _call: UpdateIntegrationBalanceCall;

  constructor(call: UpdateIntegrationBalanceCall) {
    this._call = call;
  }

  get _integration(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateIntegrationBalanceCall__Outputs {
  _call: UpdateIntegrationBalanceCall;

  constructor(call: UpdateIntegrationBalanceCall) {
    this._call = call;
  }
}
